import json

class _JplaceRecordComponent(object):
    """Component of a JplaceRecord."""

    def contains(self, search_term):
        """Return True if the component contains the search term.
        
        :param search_term: string or compiled regular expression to search for
        :returns: bool
        """
        if hasattr(search_term, "search"):
            return search_term.search(self._content) is not None
        return self._content.find(search_term) != -1

class JplaceTree(_JplaceRecordComponent):
    '''A class representing a phylogenetic tree'''
    
    def __init__(self):
      '''instead of a sequence this needs to be for storing tree information. What does that look like?'''
        self._sequences = []
        
    def __str__(self):
        return self._content
        
    def __node__(self, nodes = total):
        """standalone function. returns number of internal, external, and total nodes. Should it be nodes or edges?"""
#        return sum(len(s) for s in self._sequences)
 
    def __branch__(self, initial_node = 0, leaf = none):
        '''calculates the branch length given the starting node and ending node. default ending node is none, 
        this finds the longest branch length and returns it.'''
    
    @property
    
    
'''I am not sure what to do with this function. It returns a DNA/RNA/Protein sequence as a string, but how does this 
relate to a phylogenetic tree? This function ensure that the input is parsable by python. If we do this with the newick format
phylogenetic tree it will have the same affect yes? Is the .join necessary in this case?'''
    def _content(self):
        """Return the tree-text as a string.
        
        :returns: str
        """
        return ''.join(self._sequences) #whatever delimits a newick tree should be here. 

    def add_tree_edge(self, tree_node):
        """
        Add a sequence line to the :class:`tinyfasta.Sequence` instance.
        This function can be called more than once. Each time the function is
        called the :class:`tinyfasta.Sequence` is extended by the sequence line
        provided.
        :param sequence_line: string representing (part of) a sequence
        """
        self._sequences.append( sequence_line.strip() )

    def format_line_length(self, line_length=80):
        """Format line length used to represent the sequence.
        The full sequence is stored as list of shorter sequences. These shorter
        sequences are used verbatim when writing out the
        :class:`tinyfasta.FastaRecord` over several lines.
        
        :param line_length: length of the sequences used to make up the full
                            sequence
        """
        def string_to_list(seq, n):
            """Return list of strings of length n."""
            return [seq[i:i+n] for i in range(0, len(seq), n)]
        self._sequences = string_to_list(self._content, line_length)    
    
class JplaceRecord(object):
    '''A class representing phylogenetic tree placement'''
    
class JplaceParser(object):
    '''Class for parsing Jplace files'''
